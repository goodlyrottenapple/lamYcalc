module ITyping-Core where

open import Data.Empty
open import Data.List
open import Data.Nat
open import Data.Product
open import Data.Sum
open import Data.List.Properties
open import Data.List.Any as LAny
open LAny.Membership-≡
open import Relation.Nullary
open import Relation.Binary.Core

open import Core
open import Core-Lemmas
open import Typing using (dom)
open import Typed-Core
open import Reduction using (_↝_)

data IType : Set where
  o : IType
  _~>_ : List IType -> List IType -> IType


ω : List IType
ω = []

∩' : IType -> List IType
∩' x = (x ∷ [])

_∩_ : IType -> IType -> List IType
A ∩ B = A ∷ B ∷ []


~>-inj-l : ∀ {τ₁₁ τ₁₂ τ₂₁ τ₂₂} -> (τ₁₁ ~> τ₁₂) ≡ (τ₂₁ ~> τ₂₂) -> τ₁₁ ≡ τ₂₁
~>-inj-l refl = refl

~>-inj-r : ∀ {τ₁₁ τ₁₂ τ₂₁ τ₂₂} -> (τ₁₁ ~> τ₁₂) ≡ (τ₂₁ ~> τ₂₂) -> τ₁₂ ≡ τ₂₂
~>-inj-r refl = refl


_≟TI_ : Decidable {A = IType} _≡_
_≟TIₗ_ : Decidable {A = List IType} _≡_

o ≟TI o = yes refl
o ≟TI (_ ~> _) = no (λ ())
(_ ~> _) ≟TI o = no (λ ())
(τ₁₁ ~> τ₁₂) ≟TI (τ₂₁ ~> τ₂₂) with τ₁₁ ≟TIₗ τ₂₁ | τ₁₂ ≟TIₗ τ₂₂
(τ₁₁ ~> τ₁₂) ≟TI (.τ₁₁ ~> .τ₁₂) | yes refl | yes refl = yes refl
(τ₁₁ ~> τ₁₂) ≟TI (.τ₁₁ ~> τ₂₂) | yes refl | no τ₁₂≠τ₂₂ = no (λ eq → τ₁₂≠τ₂₂ (~>-inj-r eq))
(τ₁₁ ~> τ₁₂) ≟TI (τ₂₁ ~> τ₂₂) | no τ₁₁≠τ₂₁ | _ = no (λ eq → τ₁₁≠τ₂₁ (~>-inj-l eq))


[] ≟TIₗ [] = yes refl
[] ≟TIₗ (x ∷ τⱼ) = no (λ ())
(x ∷ τᵢ) ≟TIₗ [] = no (λ ())
(x ∷ τᵢ) ≟TIₗ (y ∷ τⱼ) with x ≟TI y | τᵢ ≟TIₗ τⱼ
(x ∷ τᵢ) ≟TIₗ (.x ∷ .τᵢ) | yes refl | yes refl = yes refl
(x ∷ τᵢ) ≟TIₗ (.x ∷ τⱼ) | yes refl | no τᵢ≠τⱼ = no (λ ∩x∷τᵢ≡∩x∷τⱼ → τᵢ≠τⱼ (proj₂ (∷-injective ∩x∷τᵢ≡∩x∷τⱼ)))
(x ∷ τᵢ) ≟TIₗ (y ∷ τⱼ) | no x≠y | _ = no (λ ∩x∷τᵢ≡∩y∷τⱼ → x≠y (proj₁ (∷-injective ∩x∷τᵢ≡∩y∷τⱼ)))



ICtxt = List (Atom × ((List IType) × Type))


data _∷'_ : IType -> Type -> Set
data _∷'ₗ_ : List IType -> Type -> Set

data _∷'_ where
  base : o ∷' σ
  arr : ∀ {δ τ A B} -> δ ∷'ₗ A -> τ ∷'ₗ B -> (δ ~> τ) ∷' (A ⟶ B)

data _∷'ₗ_ where
  nil : ∀ {A} -> ω ∷'ₗ A
  cons : ∀ {τᵢ τ A} -> τ ∷' A -> τᵢ ∷'ₗ A -> (τ ∷ τᵢ) ∷'ₗ A

data Wf-ICtxt : ICtxt -> Set where
  nil : Wf-ICtxt []
  cons : ∀ {A Γ x τ} ->
    (x∉ : x ∉ dom Γ) -> τ ∷'ₗ A -> Wf-ICtxt Γ ->
    --------------------------------------------
            Wf-ICtxt ((x , (τ , A)) ∷ Γ)



data _⊆[_]_ : IType -> Type -> IType -> Set
data _⊆ₗ[_]_ : List IType -> Type -> List IType -> Set

data _⊆[_]_ where
  base : o ⊆[ σ ] o
  arr : ∀ {A B τ₁₁ τ₁₂ τ₂₁ τ₂₂} ->
    τ₂₁ ⊆ₗ[ A ] τ₁₁ -> τ₁₂ ⊆ₗ[ B ] τ₂₂ -> (τ₁₁ ~> τ₁₂) ∷' (A ⟶ B) -> (τ₂₁ ~> τ₂₂) ∷' (A ⟶ B) ->
    -------------------------------------------------------------------------------------------
                            (τ₁₁ ~> τ₁₂) ⊆[ A ⟶ B ] (τ₂₁ ~> τ₂₂)


data _⊆ₗ[_]_ where
  nil : ∀ {A τ} ->
    τ ∷'ₗ A ->
    -----------
    ω ⊆ₗ[ A ] τ
  cons : ∀ {A τᵢ τ' τ'ᵢ} ->
    ∃(λ τ -> (τ ∈ τᵢ) × (τ' ⊆[ A ] τ)) -> τ'ᵢ ⊆ₗ[ A ] τᵢ ->
    -------------------------------------------------------
                    (τ' ∷ τ'ᵢ) ⊆ₗ[ A ] τᵢ
  ~>∩ : ∀ {A B τ τᵢ τᵢ' τₓ} ->
                ((τ ~> (τᵢ ++ τᵢ')) ∷ τₓ) ∷'ₗ (A ⟶ B) ->
    ---------------------------------------------------------
    ((τ ~> (τᵢ ++ τᵢ')) ∷ τₓ) ⊆ₗ[ A ⟶ B ] ((τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ)
  ⊆ₗ-trans : ∀ {A τᵢ τⱼ τₖ} ->
    τᵢ ⊆ₗ[ A ] τⱼ -> τⱼ ⊆ₗ[ A ] τₖ ->
    ---------------------------------
              τᵢ ⊆ₗ[ A ] τₖ


∷'ₗ-∈ : ∀ {A τ τᵢ} -> τ ∈ τᵢ -> τᵢ ∷'ₗ A -> τ ∷' A
∷'ₗ-∈ {τᵢ = []} () _
∷'ₗ-∈ {τ = τ} {τ' ∷ τᵢ} τ∈τ'τᵢ τ'τᵢ∷A with τ' ≟TI τ
∷'ₗ-∈ {A} {τ} {.τ ∷ τᵢ} τ∈τ'τᵢ (cons τ∷A τ'τᵢ∷A) | yes refl = τ∷A
∷'ₗ-∈ {A} {τ} {τ' ∷ τᵢ} τ∈τ'τᵢ (cons τ'∷A τ'τᵢ∷A) | no τ'≠τ = ∷'ₗ-∈ (∈-∷-elim τ τᵢ τ'≠τ τ∈τ'τᵢ) τ'τᵢ∷A

∷'ₗ-++-l : ∀ {A τᵢ τⱼ} -> (τᵢ ++ τⱼ) ∷'ₗ A -> τᵢ ∷'ₗ A
∷'ₗ-++-l {τᵢ = []} τᵢ++τⱼ∷A = nil
∷'ₗ-++-l {τᵢ = τ ∷ τᵢ} (cons x τᵢ++τⱼ∷A) = cons x (∷'ₗ-++-l τᵢ++τⱼ∷A)

∷'ₗ-++-r : ∀ {A τᵢ τⱼ} -> (τᵢ ++ τⱼ) ∷'ₗ A -> τⱼ ∷'ₗ A
∷'ₗ-++-r {τᵢ = []} τᵢ++τⱼ∷A = τᵢ++τⱼ∷A
∷'ₗ-++-r {A} {τᵢ = τ ∷ τᵢ} (cons x τᵢ++τⱼ∷A) = ∷'ₗ-++-r {A} {τᵢ} τᵢ++τⱼ∷A

++-∷'ₗ : ∀ {A τᵢ τⱼ} -> τᵢ ∷'ₗ A -> τⱼ ∷'ₗ A -> (τᵢ ++ τⱼ) ∷'ₗ A
++-∷'ₗ nil τⱼ∷' = τⱼ∷'
++-∷'ₗ (cons x τᵢ∷') τⱼ∷' = cons x (++-∷'ₗ τᵢ∷' τⱼ∷')

⊆-refl : ∀ {A τ} -> τ ∷' A -> τ ⊆[ A ] τ
⊆ₗ-refl : ∀ {A τ} -> τ ∷'ₗ A -> τ ⊆ₗ[ A ] τ
⊆ₗ-⊆ : ∀ {A τᵢ τⱼ} -> τᵢ ⊆ τⱼ -> τⱼ ∷'ₗ A -> τᵢ ⊆ₗ[ A ] τⱼ

⊆-refl {τ = o} base = base
⊆-refl {τ = τ ~> τ'} (arr τ∷ᵢA τ'∷ᵢB) =
  arr (⊆ₗ-refl τ∷ᵢA) (⊆ₗ-refl τ'∷ᵢB) (arr τ∷ᵢA τ'∷ᵢB) (arr τ∷ᵢA τ'∷ᵢB)

⊆ₗ-refl {τ = []} nil = nil nil
⊆ₗ-refl {A} {τ ∷ τᵢ} ττᵢ∷A = ⊆ₗ-⊆ (λ {x} z → z) ττᵢ∷A

⊆ₗ-⊆ {τᵢ = []} τᵢ⊆τⱼ τⱼ∷A = nil τⱼ∷A
⊆ₗ-⊆ {τᵢ = τ ∷ τᵢ} τᵢ⊆τⱼ τⱼ∷A =
  cons (τ , (τᵢ⊆τⱼ (here refl)) , ⊆-refl (∷'ₗ-∈ (τᵢ⊆τⱼ (here refl)) τⱼ∷A)) (⊆ₗ-⊆ (λ {x} z → τᵢ⊆τⱼ (there z)) τⱼ∷A)



⊆-∷'-r : ∀ {A τ τ'} -> τ ⊆[ A ] τ' -> τ' ∷' A
⊆-∷'-r base = base
⊆-∷'-r (arr _ _ _ x) = x

⊆-∷'-l : ∀ {A τ τ'} -> τ ⊆[ A ] τ' -> τ ∷' A
⊆-∷'-l base = base
⊆-∷'-l (arr _ _ x _) = x

⊆ₗ-∷'ₗ-r : ∀ {A τᵢ τⱼ} -> τᵢ ⊆ₗ[ A ] τⱼ -> τⱼ ∷'ₗ A
⊆ₗ-∷'ₗ-r {τᵢ = []} (nil τⱼ∷A) = τⱼ∷A
⊆ₗ-∷'ₗ-r {τᵢ = []} (⊆ₗ-trans τᵢ⊆τⱼ τᵢ⊆τⱼ₁) = ⊆ₗ-∷'ₗ-r τᵢ⊆τⱼ₁
⊆ₗ-∷'ₗ-r {τᵢ = τ ∷ τᵢ} (cons x τᵢ⊆τⱼ) = ⊆ₗ-∷'ₗ-r τᵢ⊆τⱼ
⊆ₗ-∷'ₗ-r {τᵢ = _ ∷ τₓ} (~>∩ {τᵢ = τᵢ} (cons (arr x x₁) τₓ∷')) =
  cons (arr x (∷'ₗ-++-l x₁)) (cons (arr x (∷'ₗ-++-r {τᵢ = τᵢ} x₁)) τₓ∷')
⊆ₗ-∷'ₗ-r {τᵢ = τ ∷ τᵢ} (⊆ₗ-trans τᵢ⊆τⱼ τᵢ⊆τⱼ₁) = ⊆ₗ-∷'ₗ-r τᵢ⊆τⱼ₁


⊆ₗ-∷'ₗ-l : ∀ {A τᵢ τⱼ} -> τᵢ ⊆ₗ[ A ] τⱼ -> τᵢ ∷'ₗ A
⊆ₗ-∷'ₗ-l (nil x) = nil
⊆ₗ-∷'ₗ-l (cons (_ , _ , τ'⊆τ) τᵢ⊆τⱼ) = cons (⊆-∷'-l τ'⊆τ) (⊆ₗ-∷'ₗ-l τᵢ⊆τⱼ)
⊆ₗ-∷'ₗ-l (~>∩ x) = x
⊆ₗ-∷'ₗ-l (⊆ₗ-trans τᵢ⊆τⱼ τⱼ⊆τₖ) = ⊆ₗ-∷'ₗ-l τᵢ⊆τⱼ

-- ⊆ₗ-∈-∃ : ∀ {A τ τ₁ τ₂} -> τ₁ ⊆ₗ[ A ] τ₂ -> τ ∈ τ₁ -> ∃(λ τ' -> (τ' ∈ τ₂) × (τ ⊆[ A ] τ'))
-- ⊆ₗ-∈-∃ (cons ∃τ τ₁⊆τ₂) (here refl) = ∃τ
-- ⊆ₗ-∈-∃ (cons _ τ₁⊆τ₂) (there τ∈τ₁) = ⊆ₗ-∈-∃ τ₁⊆τ₂ τ∈τ₁
--
--
-- ⊆ₗ-ω-⊥ : ∀ {A τ τᵢ} -> (τ ∷ τᵢ) ⊆ₗ[ A ] ω -> ⊥
-- ⊆ₗ-ω-⊥ (cons (_ , () , _) _)
--

⊆-trans : ∀ {A τ₁ τ₂ τ₃} ->
  τ₁ ⊆[ A ] τ₂ -> τ₂ ⊆[ A ] τ₃ ->
  -------------------------------
            τ₁ ⊆[ A ] τ₃

-- ⊆ₗ-trans : ∀ {A τᵢ τⱼ τₖ} ->
--   τᵢ ⊆ₗ[ A ] τⱼ -> τⱼ ⊆ₗ[ A ] τₖ ->
--   ---------------------------------
--             τᵢ ⊆ₗ[ A ] τₖ
⊆-trans base base = base
⊆-trans (arr τ₂₁⊆τ₁₁ τ₁₂⊆τ₂₂ τ₁₁~>τ₁₂∷A⟶B _) (arr τ₂₃⊆τ₂₁ τ₂₂⊆τ₂₄ τ₂₁~>τ₂₂∷A⟶B τ₂₃~>τ₂₄∷A⟶B) =
  arr (⊆ₗ-trans τ₂₃⊆τ₂₁ τ₂₁⊆τ₁₁) (⊆ₗ-trans τ₁₂⊆τ₂₂ τ₂₂⊆τ₂₄) τ₁₁~>τ₁₂∷A⟶B τ₂₃~>τ₂₄∷A⟶B

-- ⊆ₗ-trans {τᵢ = []} τᵢ⊆τⱼ τⱼ⊆τₖ = nil (⊆ₗ-∷'ₗ-r τⱼ⊆τₖ)
-- ⊆ₗ-trans {τᵢ = τ' ∷ τᵢ} τᵢ⊆τⱼ (nil x) = ⊥-elim (⊆ₗ-ω-⊥ τᵢ⊆τⱼ)
-- ⊆ₗ-trans {τᵢ = τ ∷ τᵢ} {τⱼ} {τₖ} (cons (τ' , τ'∈τⱼ , τ⊆τ') τᵢ⊆τⱼ) τⱼ⊆τₖ =
--   cons (τ'' , (τ''∈τₖ , (⊆-trans τ⊆τ' τ'⊆τ''))) (⊆ₗ-trans τᵢ⊆τⱼ τⱼ⊆τₖ)
--     where
--     τ'' = proj₁ (⊆ₗ-∈-∃ τⱼ⊆τₖ τ'∈τⱼ)
--     τ''∈τₖ = proj₁ (proj₂ (⊆ₗ-∈-∃ τⱼ⊆τₖ τ'∈τⱼ))
--     τ'⊆τ'' = proj₂ (proj₂ (⊆ₗ-∈-∃ τⱼ⊆τₖ τ'∈τⱼ))

⊆->⊆ₗ : ∀ {A τ τ'} -> τ ⊆[ A ] τ' -> (∩' τ) ⊆ₗ[ A ] (∩' τ')
⊆->⊆ₗ {τ = τ} {τ'} τ⊆τ' = cons (τ' , (here refl , τ⊆τ')) (nil (cons (⊆-∷'-r τ⊆τ') nil))

_≈_ : (A B : List IType) -> Set
A ≈ B = A ⊆ B × B ⊆ A

data _⊩_∶_ : ∀ {A} -> ICtxt -> Λ A -> IType -> Set
data _⊩ₗ_∶_ : ∀ {A} -> ICtxt -> Λ A -> List IType -> Set

data _⊩_∶_ where
  var : ∀ {A Γ x τ} {τᵢ : List IType} ->
    (wf-Γ : Wf-ICtxt Γ) -> (τᵢ∈Γ : (x , (τᵢ , A)) ∈ Γ) -> (τ⊆τᵢ : (∩' τ) ⊆ₗ[ A ] τᵢ) ->
    -----------------------------------------------------------------------------------
                                    Γ ⊩ fv {A} x ∶ τ
  app : ∀ {A B Γ s t τ τ₁ τ₂} ->
    Γ ⊩ s ∶ (τ₁ ~> τ₂) -> Γ ⊩ₗ t ∶ τ₁ -> (∩' τ) ⊆ₗ[ B ] τ₂ -> τ₁ ∷'ₗ A ->
    ---------------------------------------------------------------------
                        Γ ⊩ (app {A} {B} s t) ∶ τ
  abs : ∀ {A B Γ τ τ'} (L : FVars) -> ∀ {t : Λ B} ->
    ( cf : ∀ {x} -> (x∉L : x ∉ L) -> ((x , (τ , A)) ∷ Γ) ⊩ₗ Λ[ 0 >> fv {A} x ] t ∶ τ' ) -> (τ ~> τ') ∷' (A ⟶ B) ->
    --------------------------------------------------------------------------------------------------------------
                                                Γ ⊩ lam A t ∶ (τ ~> τ')
  Y : ∀ {Γ A τ τ₁ τ₂} ->
    (wf-Γ : Wf-ICtxt Γ) -> (∩' (τ ~> τ)) ⊆ₗ[ A ⟶ A ] τ₁ -> τ₂ ⊆ₗ[ A ] τ -> -- ∃(λ τ' -> (τ' ∈ τ₁) × ((τ ~> τ) ⊆[ A ⟶ A ] τ')) -> τ₁ ∷'ₗ (A ⟶ A) ->
    ----------------------------------------------------------------------
                            Γ ⊩ Y A ∶ (τ₁ ~> τ₂)
  ~>∩ : ∀ {Γ A B τ τ₁ τ₂ τ₁++τ₂} {m : Λ (A ⟶ B)} ->
    Γ ⊩ m ∶ (τ ~> τ₁) -> Γ ⊩ m ∶ (τ ~> τ₂) -> τ₁++τ₂ ⊆ₗ[ B ] (τ₁ ++ τ₂) -> -- τ₁++τ₂ ≈ (τ₁ ++ τ₂) ->
    ----------------------------------------------------------------
                        Γ ⊩ m ∶ (τ ~> τ₁++τ₂)

data _⊩ₗ_∶_ where
  nil : ∀ {A Γ} {m : Λ A} ->
    (wf-Γ : Wf-ICtxt Γ) ->
    ----------------------
          Γ ⊩ₗ m  ∶ ω
  cons : ∀ {A Γ τ τᵢ} {m : Λ A} ->
    Γ ⊩ m  ∶ τ -> Γ ⊩ₗ m  ∶ τᵢ ->
    --------------------------------
          Γ ⊩ₗ m  ∶ (τ ∷ τᵢ)
  -- subₗ : ∀ {A Γ τ τ'} {m : Λ A} ->
  --   Γ ⊩ₗ m ∶ τ -> τ' ⊆ₗ[ A ] τ ->
  --   -----------------------------
  --           Γ ⊩ₗ m ∶ τ'


data ΛTerm : ∀ {τ} -> Λ τ -> Set where
  var : ∀ {A x} -> ΛTerm (fv {A} x)
  lam : ∀ {A B} (L : FVars) -> ∀ {e : Λ B} ->
    (cf : ∀ {x} -> (x∉L : x ∉ L) -> ΛTerm (Λ[ 0 >> fv {A} x ] e)) -> ΛTerm (lam A e)
  app : ∀ {A B} {e₁ : Λ (A ⟶ B)} {e₂ : Λ A} -> ΛTerm e₁ -> ΛTerm e₂ -> ΛTerm (app e₁ e₂)
  Y : ∀ {t} -> ΛTerm (Y t)



data _⊆Γ_ : ICtxt -> ICtxt -> Set where
  nil : ∀ {Γ} ->
    (wf-Γ : Wf-ICtxt Γ) ->
    ----------------------
          [] ⊆Γ Γ
  cons : ∀ {A x τ' Γ Γ'} ->
    ∃(λ τ -> ((x , (τ , A)) ∈ Γ') × (τ' ⊆ₗ[ A ] τ)) -> Γ ⊆Γ Γ' ->
    ------------------------------------------------------------
                      ((x , (τ' , A)) ∷ Γ) ⊆Γ Γ'


⊩ₗ-wf-Γ : ∀ {A Γ} {m : Λ A} {τ} -> Γ ⊩ₗ m ∶ τ -> Wf-ICtxt Γ
⊩ₗ-wf-Γ (nil wf-Γ) = wf-Γ
⊩ₗ-wf-Γ (cons _ Γ⊩ₗm∶τ) = ⊩ₗ-wf-Γ Γ⊩ₗm∶τ
-- ⊩ₗ-wf-Γ (subₗ x _) = ⊩ₗ-wf-Γ x

⊆Γ-wfΓ' : ∀ {Γ Γ'} -> Γ ⊆Γ Γ' -> Wf-ICtxt Γ'
⊆Γ-wfΓ' (nil wf-Γ') = wf-Γ'
⊆Γ-wfΓ' (cons _ Γ⊆Γ') = ⊆Γ-wfΓ' Γ⊆Γ'

wf-Γ-∷'ₗ : ∀ {A x τ Γ} -> (x , (τ , A)) ∈ Γ -> Wf-ICtxt Γ -> τ ∷'ₗ A
wf-Γ-∷'ₗ (here refl) (cons _ x₁ _) = x₁
wf-Γ-∷'ₗ (there xτA∈Γ) (cons _ _ wf-Γ) = wf-Γ-∷'ₗ xτA∈Γ wf-Γ


⊆Γ-⊆ : ∀ {Γ Γ'} -> Wf-ICtxt Γ' -> Γ ⊆ Γ' -> Γ ⊆Γ Γ'
⊆Γ-⊆ {[]} wf-Γ' Γ⊆Γ' = nil wf-Γ'
⊆Γ-⊆ {(x , τ , A) ∷ Γ} wf-Γ' Γ⊆Γ' = cons
  (τ , ((Γ⊆Γ' (here refl)) , ⊆ₗ-refl (wf-Γ-∷'ₗ (Γ⊆Γ' (here refl)) wf-Γ')))
  (⊆Γ-⊆ wf-Γ' (λ {x₁} z → Γ⊆Γ' (there z)))


∈-⊆Γ-trans : ∀ {A x τᵢ} {Γ Γ'} -> (x , (τᵢ , A)) ∈ Γ -> Γ ⊆Γ Γ' -> ∃(λ τᵢ' -> ((x , (τᵢ' , A)) ∈ Γ') × τᵢ ⊆ₗ[ A ] τᵢ')
∈-⊆Γ-trans (here refl) (cons x _) = x
∈-⊆Γ-trans (there x∈L) (cons _ L⊆L') = ∈-⊆Γ-trans x∈L L⊆L'


⊆Γ-∷ : ∀ {A x τᵢ Γ Γ'} -> x ∉ dom Γ' -> τᵢ ∷'ₗ A -> Γ ⊆Γ Γ' -> Γ ⊆Γ ((x , τᵢ , A) ∷ Γ')
⊆Γ-∷ {Γ = []} x∉Γ' τᵢ∷A Γ⊆Γ' = nil (cons x∉Γ' τᵢ∷A (⊆Γ-wfΓ' Γ⊆Γ'))
⊆Γ-∷ {Γ = (x , τᵢ , A) ∷ Γ} x∉Γ' τᵢ∷A (cons (proj₁ , proj₂ , proj₃) Γ⊆Γ') =
  cons (proj₁ , ((there proj₂) , proj₃)) (⊆Γ-∷ x∉Γ' τᵢ∷A Γ⊆Γ')


arr' : ∀ {A B τ τ'} -> (τ ~> τ') ∷' (A ⟶ B) -> (τ ∷'ₗ A × τ' ∷'ₗ B)
arr' (arr x y) = x , y

⊆-∷'ₗ : ∀ {A τᵢ τⱼ} -> τᵢ ⊆ τⱼ -> τⱼ ∷'ₗ A -> τᵢ ∷'ₗ A
⊆-∷'ₗ {τᵢ = []} τᵢ⊆τⱼ τⱼ∷' = nil
⊆-∷'ₗ {τᵢ = x ∷ τᵢ} x∷τᵢ⊆τⱼ τⱼ∷' = cons (∷'ₗ-∈ (x∷τᵢ⊆τⱼ (here refl)) τⱼ∷') (⊆-∷'ₗ {τᵢ = τᵢ} (λ {x₁} z → x∷τᵢ⊆τⱼ (there z)) τⱼ∷')


⊩-∷' : ∀ {A Γ} {m : Λ A} {τ} -> Γ ⊩ m ∶ τ -> τ ∷' A
⊩ₗ-∷'ₗ : ∀ {A Γ} {m : Λ A} {τ} -> Γ ⊩ₗ m ∶ τ -> τ ∷'ₗ A

⊩-∷' (var _ _ τ⊆τᵢ) = ∷'ₗ-∈ (here refl) (⊆ₗ-∷'ₗ-l τ⊆τᵢ)
⊩-∷' (app _ _ τ⊆τᵢ _) = ∷'ₗ-∈ (here refl) (⊆ₗ-∷'ₗ-l τ⊆τᵢ)
⊩-∷' (abs _ _ x) = x
⊩-∷' (Y _ τ⊆τ~>τ τ₂⊆τ) = arr (⊆ₗ-∷'ₗ-r τ⊆τ~>τ) (⊆ₗ-∷'ₗ-l τ₂⊆τ)
⊩-∷' (~>∩ x y τ₁τ₂⊆τ₁++τ₂) = arr τ∷ {!   !} -- arr τ∷ (⊆ₗ-∷'ₗ-l z)
  where
  τ~>τ₁∷ = ⊩-∷' x
  τ~>τ₂∷ = ⊩-∷' y

  τ∷ = proj₁ (arr' τ~>τ₁∷)
  τ₁∷ = proj₂ (arr' τ~>τ₁∷)
  τ₂∷ = proj₂ (arr' τ~>τ₂∷)
  τ₁++τ₂∷ = ++-∷'ₗ τ₁∷ τ₂∷

⊩ₗ-∷'ₗ (nil _) = nil
⊩ₗ-∷'ₗ (cons Γ⊩m∶τ Γ⊩ₗm∶τᵢ) = cons (⊩-∷' Γ⊩m∶τ) (⊩ₗ-∷'ₗ Γ⊩ₗm∶τᵢ)
-- ⊩ₗ-∷'ₗ (subₗ _ x) = ⊆ₗ-∷'ₗ-l x




data _->Λβ_ : ∀ {τ} -> Λ τ ↝ Λ τ where
  redL : ∀ {A B} {n : Λ A} {m m' : Λ (A ⟶ B)} -> ΛTerm n -> m ->Λβ m' -> app m n ->Λβ app m' n
  redR : ∀ {A B} {m : Λ (A ⟶ B)} {n n' : Λ A} -> ΛTerm m -> n ->Λβ n' -> app m n ->Λβ app m n'
  abs : ∀ L {A B} {m m' : Λ B} -> ( ∀ {x} -> x ∉ L -> Λ[ 0 >> fv {A} x ] m ->Λβ Λ[ 0 >> fv {A} x ] m' ) ->
    lam A m ->Λβ lam A m'
  beta : ∀ {A B} {m : Λ (A ⟶ B)} {n : Λ A} -> ΛTerm (lam A m) -> ΛTerm n -> app (lam A m) n ->Λβ (Λ[ 0 >> n ] m)
  Y : ∀ {A} {m : Λ (A ⟶ A)} -> ΛTerm m -> app (Y A) m ->Λβ app m (app (Y A) m)


subΓ : ∀ {A Γ Γ'} {m : Λ A} {τ} -> Γ ⊩ m ∶ τ -> Γ ⊆Γ Γ' -> Γ' ⊩ m ∶ τ
subₗΓ : ∀ {A Γ Γ'} {m : Λ A} {τ} -> Γ ⊩ₗ m ∶ τ -> Γ ⊆Γ Γ' -> Γ' ⊩ₗ m ∶ τ

subΓ (var wf-Γ τᵢ∈Γ τ⊆τᵢ) Γ⊆Γ' = var (⊆Γ-wfΓ' Γ⊆Γ') τᵢ'∈ (⊆ₗ-trans τ⊆τᵢ τᵢ⊆τᵢ')
  where
  τᵢ'∈ = proj₁ (proj₂ (∈-⊆Γ-trans τᵢ∈Γ Γ⊆Γ'))
  τᵢ⊆τᵢ' = proj₂ (proj₂ (∈-⊆Γ-trans τᵢ∈Γ Γ⊆Γ'))

subΓ (app Γ⊩m∶τ x x₁ x₂) Γ⊆Γ' = app (subΓ Γ⊩m∶τ Γ⊆Γ') (subₗΓ x Γ⊆Γ') x₁ x₂
subΓ {Γ' = Γ'} (abs {τ = τ} L cf (arr τ∷A τ'∷B)) Γ⊆Γ' = abs
  (L ++ dom Γ')
  (λ x∉ → subₗΓ
    (cf (∉-cons-l _ _ x∉))
    (cons
      (τ , (here refl) , (⊆ₗ-refl τ∷A))
      (⊆Γ-∷ (∉-cons-r L _ x∉) τ∷A Γ⊆Γ')))
  (arr τ∷A τ'∷B)
subΓ (Y x x₁ x₂) Γ⊆Γ' = Y (⊆Γ-wfΓ' Γ⊆Γ') x₁ x₂
subΓ (~>∩ x x₁ z) Γ⊆Γ' = ~>∩ (subΓ x Γ⊆Γ') (subΓ x₁ Γ⊆Γ') z

subₗΓ (nil wf-Γ) Γ⊆Γ' = nil (⊆Γ-wfΓ' Γ⊆Γ')
subₗΓ (cons x Γ⊩ₗm∶τ) Γ⊆Γ' = cons (subΓ x Γ⊆Γ') (subₗΓ Γ⊩ₗm∶τ Γ⊆Γ')
-- subₗΓ (subₗ x y) Γ⊆Γ' = subₗ (subₗΓ x Γ⊆Γ') y


⊩ₗ-∈-⊩ : ∀ {A Γ} {m : Λ A} {τ τᵢ} -> Γ ⊩ₗ m ∶ τᵢ -> τ ∈ τᵢ -> Γ ⊩ m ∶ τ
⊩ₗ-∈-⊩ (nil _) ()
⊩ₗ-∈-⊩ (cons Γ⊩m∶τ x) (here refl) = Γ⊩m∶τ
⊩ₗ-∈-⊩ (cons _ Γ⊩ₗm∶τᵢ) (there τ∈τᵢ) = ⊩ₗ-∈-⊩ Γ⊩ₗm∶τᵢ τ∈τᵢ

∈-++-∨ : ∀ {a} {A : Set a} {x : A} xs {ys} -> x ∈ (xs ++ ys) -> (x ∈ xs) ∨ (x ∈ ys)
∈-++-∨ [] x∈xs++ys = inj₂ x∈xs++ys
∈-++-∨ (x ∷ xs) (here refl) = inj₁ (here refl)
∈-++-∨ (x ∷ xs) (there x∈xs++ys) = Data.Sum.map there (λ x → x) (∈-++-∨ xs x∈xs++ys)


∈-∨-++ : ∀ {a} {A : Set a} {x : A} {xs ys} -> (x ∈ xs) ∨ (x ∈ ys) -> x ∈ (xs ++ ys)
∈-∨-++ {ys = ys} (inj₁ x∈xs) = ∈-cons-l ys x∈xs
∈-∨-++ {xs = xs} (inj₂ x∈ys) = ∈-cons-r xs x∈ys



∷'ₗ-++ : ∀ {A τᵢ τⱼ} -> τᵢ ∷'ₗ A -> τⱼ ∷'ₗ A -> (τᵢ ++ τⱼ) ∷'ₗ A
∷'ₗ-++ nil τⱼ∷A = τⱼ∷A
∷'ₗ-++ (cons x τᵢ∷A) τⱼ∷A = cons x (∷'ₗ-++ τᵢ∷A τⱼ∷A)

∨-comm : ∀ {a} {P Q : Set a} → (P ∨ Q) → (Q ∨ P)
∨-comm (inj₁ p) = inj₂ p
∨-comm (inj₂ q) = inj₁ q

⊆-++-comm : ∀ {a} {A : Set a} {X Y : List A} -> (X ++ Y) ⊆ (Y ++ X)
⊆-++-comm {X = X} x∈X++Y = ∈-∨-++ (∨-comm (∈-++-∨ X x∈X++Y))

⊆ₗ-++-comm : ∀ {A τᵢ τⱼ τ} -> (τᵢ ++ τⱼ) ⊆ₗ[ A ] τ -> (τⱼ ++ τᵢ) ⊆ₗ[ A ] τ
⊆ₗ-++-comm {A} {τᵢ} {τⱼ} τᵢ++τⱼ⊆ₗτ = ⊆ₗ-trans (⊆ₗ-⊆ (⊆-++-comm {X = τⱼ} {τᵢ}) (∷'ₗ-++ {A} {τᵢ} {τⱼ} (∷'ₗ-++-l τᵢ++τⱼ∷'A) (∷'ₗ-++-r {τᵢ = τᵢ} τᵢ++τⱼ∷'A))) τᵢ++τⱼ⊆ₗτ
  where
  τᵢ++τⱼ∷'A = ⊆ₗ-∷'ₗ-l τᵢ++τⱼ⊆ₗτ


⊆ₗ++-r : ∀ {A τᵢ τᵢ' τⱼ} -> τᵢ ⊆ₗ[ A ] τᵢ' -> τⱼ ∷'ₗ A -> (τᵢ ++ τⱼ) ⊆ₗ[ A ] (τᵢ' ++ τⱼ)
⊆ₗ++-r {τᵢ' = τᵢ'} {τⱼ} (nil x) τⱼ∷'A = ⊆ₗ-⊆ (λ x₂ → ∈-cons-r τᵢ' x₂) (∷'ₗ-++ x τⱼ∷'A)
⊆ₗ++-r (cons (τ , τ∈τᵢ , τ'⊆τ) τᵢ⊆τᵢ') τⱼ∷'A = cons (τ , (∈-cons-l _ τ∈τᵢ , τ'⊆τ)) (⊆ₗ++-r τᵢ⊆τᵢ' τⱼ∷'A)
⊆ₗ++-r {τⱼ = τⱼ} (~>∩ x) τⱼ∷'A = ~>∩ (∷'ₗ-++ {τⱼ = τⱼ} x τⱼ∷'A)
⊆ₗ++-r (⊆ₗ-trans τᵢ⊆τᵢ'' τᵢ''⊆τᵢ') τⱼ∷'A = ⊆ₗ-trans (⊆ₗ++-r τᵢ⊆τᵢ'' τⱼ∷'A) (⊆ₗ++-r τᵢ''⊆τᵢ' τⱼ∷'A)


⊩++ : ∀ {A Γ} {m : Λ (A ⟶ A)} {τᵢ τⱼ} -> Γ ⊩ₗ m ∶ τᵢ -> Γ ⊩ₗ m ∶ τⱼ -> Γ ⊩ₗ m ∶ (τᵢ ++ τⱼ)
⊩++ {τᵢ = []} Γ⊩ₗm∶τᵢ Γ⊩ₗm∶τⱼ = Γ⊩ₗm∶τⱼ
⊩++ {τᵢ = x ∷ τᵢ} (cons x₁ Γ⊩ₗm∶τᵢ) Γ⊩ₗm∶τⱼ = cons x₁ (⊩++ Γ⊩ₗm∶τᵢ Γ⊩ₗm∶τⱼ)
-- ⊩++ {τᵢ = x ∷ τᵢ} (subₗ Γ⊩ₗm∶τᵢ x₁) Γ⊩ₗm∶τⱼ = subₗ (⊩++ Γ⊩ₗm∶τᵢ Γ⊩ₗm∶τⱼ) (⊆ₗ++-r x₁ (⊩ₗ-∷'ₗ Γ⊩ₗm∶τⱼ))

⊆-++-ctrct : ∀ {a} {A : Set a} {X : List A} -> X ++ X ⊆ X
⊆-++-ctrct {X = X} x∈X++X with ∈-++-∨ X x∈X++X
⊆-++-ctrct x∈X++X | inj₁ x = x
⊆-++-ctrct x∈X++X | inj₂ x = x


glb : ∀ {A τ τᵢ τⱼ} -> τᵢ ⊆ₗ[ A ] τ -> τⱼ ⊆ₗ[ A ] τ -> (τᵢ ++ τⱼ) ⊆ₗ[ A ] τ
glb (nil x) τⱼ⊆τ = τⱼ⊆τ
glb (cons x τᵢ⊆τ) τⱼ⊆τ = cons x (glb τᵢ⊆τ τⱼ⊆τ)
glb {A ⟶ B} {τⱼ = τⱼ} (~>∩ {τ = τ} {τᵢ} {τᵢ'} {τₓ} (cons (arr x x₁) x₂)) τⱼ⊆τ = ⊆ₗ-trans {τⱼ = ((τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ ++ τⱼ)}
  (~>∩ (∷'ₗ-++ {τᵢ = (τ ~> (τᵢ ++ τᵢ')) ∷ τₓ} {τⱼ} (cons (arr x x₁) x₂) (⊆ₗ-∷'ₗ-l τⱼ⊆τ)))
  (⊆ₗ-++-comm {τᵢ = τⱼ} {(τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ}
    (⊆ₗ-trans {τⱼ = ((τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ) ++ (τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ}
      (⊆ₗ++-r {τⱼ = ((τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ)} τⱼ⊆τ ∷'A⟶B)
      (⊆ₗ-⊆ (⊆-++-ctrct {X = (τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ}) ∷'A⟶B)))
  where
  ∷'A⟶B : ((τ ~> τᵢ) ∷ (τ ~> τᵢ') ∷ τₓ) ∷'ₗ (A ⟶ B)
  ∷'A⟶B = cons (arr x (∷'ₗ-++-l x₁)) (cons (arr x (∷'ₗ-++-r {τᵢ = τᵢ} x₁)) x₂)

glb (⊆ₗ-trans τᵢ⊆τᵢ' τᵢ'⊆τᵢ) τⱼ⊆τ = ⊆ₗ-trans (⊆ₗ++-r τᵢ⊆τᵢ' (⊆ₗ-∷'ₗ-l τⱼ⊆τ)) (glb τᵢ'⊆τᵢ τⱼ⊆τ)

mon : ∀ {A τ τ' τᵢ τᵢ'} -> τ ⊆ₗ[ A ] τ' -> τᵢ ⊆ₗ[ A ] τᵢ' -> (τ ++ τᵢ) ⊆ₗ[ A ] (τ' ++ τᵢ')
mon {τ' = τ'} τ⊆τ' τᵢ⊆τᵢ' = glb
  (⊆ₗ-trans τ⊆τ' (⊆ₗ-⊆ (λ x₁ → ∈-cons-l _ x₁) (∷'ₗ-++ (⊆ₗ-∷'ₗ-r τ⊆τ') (⊆ₗ-∷'ₗ-r τᵢ⊆τᵢ'))))
  (⊆ₗ-trans τᵢ⊆τᵢ' (⊆ₗ-⊆ (λ x₁ → ∈-cons-r τ' x₁) (∷'ₗ-++ (⊆ₗ-∷'ₗ-r τ⊆τ') (⊆ₗ-∷'ₗ-r τᵢ⊆τᵢ'))))




-- ∃⊆ₗ-++ : ∀ {A τ τ₁ τ₂} -> τ ⊆ₗ[ A ] (τ₁ ++ τ₂) -> ∃(λ {(τ₁' , τ₂') -> τ ≈ (τ₁' ++ τ₂') × (τ₁' ⊆ₗ[ A ] τ₁) × (τ₂' ⊆ₗ[ A ] τ₂) })
-- ∃⊆ₗ-++ {τ₁ = τ₁} (nil x) = ([] , []) , (((λ {x₁} x₂ → x₂) , (λ {x₁} x₂ → x₂)) , (nil (∷'ₗ-++-l x)) , (nil (∷'ₗ-++-r {τᵢ = τ₁} x)))
-- ∃⊆ₗ-++ {A} {τ ∷ τᵢ} {τ₁} {τ₂} (cons (τ' , τ'∈τ₁++τ₂ , τ⊆τ') τᵢ⊆ₗτ₁++τ₂) with ∈-++-∨ τ₁ τ'∈τ₁++τ₂
-- ∃⊆ₗ-++ {A} {τ ∷ τᵢ} {τ₁} {τ₂} (cons (τ' , τ'∈τ₁++τ₂ , τ⊆τ') τᵢ⊆ₗτ₁++τ₂) | inj₁ τ'∈τ₁ =
--   ((τ ∷ τ₁') , τ₂') , ((cons-⊆ τᵢ⊆τ₁'++τ₂' , cons-⊆ τ₁'++τ₂'⊆τᵢ) , (cons (τ' , (τ'∈τ₁ , τ⊆τ')) τ₁'⊆ₗτ₁ , τ₂'⊆ₗτ₂))
--   where
--   ih : ∃(λ {(τ₁' , τ₂') -> τᵢ ≈ (τ₁' ++ τ₂') × (τ₁' ⊆ₗ[ A ] τ₁) × (τ₂' ⊆ₗ[ A ] τ₂) })
--   ih = ∃⊆ₗ-++ τᵢ⊆ₗτ₁++τ₂
--
--   τ₁' = proj₁ (proj₁ ih)
--   τ₂' = proj₂ (proj₁ ih)
--   τᵢ⊆τ₁'++τ₂' = proj₁ (proj₁ (proj₂ ih))
--   τ₁'++τ₂'⊆τᵢ = proj₂ (proj₁ (proj₂ ih))
--   τ₁'⊆ₗτ₁ = proj₁ (proj₂ (proj₂ ih))
--   τ₂'⊆ₗτ₂ = proj₂ (proj₂ (proj₂ ih))
--
-- ∃⊆ₗ-++ {A} {τ ∷ τᵢ} {τ₁} {τ₂} (cons (τ' , τ'∈τ₁++τ₂ , τ⊆τ') τᵢ⊆ₗτ₁++τ₂) | inj₂ τ'∈τ₂ =
--   (τ₁' , (τ ∷ τ₂')) , (({!   !} , {!   !}) , (τ₁'⊆ₗτ₁ , (cons (τ' , (τ'∈τ₂ , τ⊆τ')) τ₂'⊆ₗτ₂)))
--   where
--   ih : ∃(λ {(τ₁' , τ₂') -> τᵢ ≈ (τ₁' ++ τ₂') × (τ₁' ⊆ₗ[ A ] τ₁) × (τ₂' ⊆ₗ[ A ] τ₂) })
--   ih = ∃⊆ₗ-++ τᵢ⊆ₗτ₁++τ₂
--
--   τ₁' = proj₁ (proj₁ ih)
--   τ₂' = proj₂ (proj₁ ih)
--   τᵢ⊆τ₁'++τ₂' = proj₁ (proj₁ (proj₂ ih))
--   τ₁'++τ₂'⊆τᵢ = proj₂ (proj₁ (proj₂ ih))
--   τ₁'⊆ₗτ₁ = proj₁ (proj₂ (proj₂ ih))
--   τ₂'⊆ₗτ₂ = proj₂ (proj₂ (proj₂ ih))
-- ∈-trans : ∀ {a} {X : Set a} {A B : List X} {x} -> x ∈ A -> A ⊆ B -> x ∈ B
-- ∈-trans x∈A A⊆B = A⊆B x∈A

-- ∃-≈-⊆ : ∀ {A} τ τ' τ₁ τ₂ -> τ₁ ∷'ₗ A -> τ₂ ∷'ₗ A -> τ ≈ (τ₁ ++ τ₂) -> τ' ⊆ₗ[ A ] τ -> ∃(λ{(τ₁' , τ₂') -> τ' ≈ (τ₁' ++ τ₂') × τ₁' ⊆ₗ[ A ] τ₁ × τ₂' ⊆ₗ[ A ] τ₂})
-- ∃-≈-⊆ τ .[] τ₁ τ₂ τ₁∷' τ₂∷' τ≈τ₁++τ₂ (nil x₁) = ([] , []) , (((λ {x₂} x₅ → x₅) , (λ {x₂} x₅ → x₅)) , ((nil τ₁∷') , (nil τ₂∷')))
-- ∃-≈-⊆ τ _ τ₁ τ₂ τ₁∷' τ₂∷' τ≈τ₁++τ₂ (cons x₁ τ'⊆ₗτ) = {!   !}
-- ∃-≈-⊆ {A ⟶ B} _ _ τ₁ τ₂ τ₁∷' τ₂∷' (τ⊆τ₁++τ₂ , τ₁++τ₂⊆τ) (~>∩ {τ = τ} {τᵢ} {τⱼ} {τₓ} x₁) with ∈-++-∨ τ₁ (τ⊆τ₁++τ₂ (here refl)) | ∈-++-∨ τ₁ (τ⊆τ₁++τ₂ (there (here refl)))
-- ∃-≈-⊆ {A ⟶ B} _ _ τ₁ τ₂ τ₁∷' τ₂∷' (τ⊆τ₁++τ₂ , τ₁++τ₂⊆τ) (~>∩ x₁) | inj₁ τ~>τᵢ∈τ₁ | inj₁ τ~>τⱼ∈τ₁ = {!   !}
-- ∃-≈-⊆ {A ⟶ B} _ _ τ₁ τ₂ τ₁∷' τ₂∷' (τ⊆τ₁++τ₂ , τ₁++τ₂⊆τ) (~>∩ x₁) | inj₁ τ~>τᵢ∈τ₁ | inj₂ τ~>τⱼ∈τ₂ = {!   !}
-- ∃-≈-⊆ {A ⟶ B} _ _ τ₁ τ₂ τ₁∷' τ₂∷' (τ⊆τ₁++τ₂ , τ₁++τ₂⊆τ) (~>∩ x₁) | inj₂ τ~>τᵢ∈τ₂ | inj₁ τ~>τⱼ∈τ₁ = {!   !}
-- ∃-≈-⊆ {A ⟶ B} _ _ τ₁ τ₂ τ₁∷' τ₂∷' (τ⊆τ₁++τ₂ , τ₁++τ₂⊆τ) (~>∩ x₁) | inj₂ τ~>τᵢ∈τ₂ | inj₂ τ~>τⱼ∈τ₂ = {!   !}
  -- where
  -- ih : ∃(λ{(τ₁'' , τ₂'') -> τₓ ≈ (τ₁'' ++ τ₂'') × τ₁'' ⊆ₗ[ A ⟶ B ] τ₁ × τ₂'' ⊆ₗ[ A ⟶ B ] τ₂})
  -- ih = body τₓ τₓ τ₁ τ₂ τ₁∷' τ₂∷' {!   !} (⊆ₗ-refl {!   !})

-- ∃-≈-⊆ {A} τ τ' τ₁ τ₂ τ₁∷' τ₂∷' τ≈τ₁++τ₂ (⊆ₗ-trans {τⱼ = τ''} τ'⊆ₗτ'' τ''⊆ₗτ) = (τ₁' , τ₂') , τ'≈τ₁'++τ₂' , (⊆ₗ-trans τ₁'⊆ₗτ₁'' τ₁''⊆ₗτ₁ , ⊆ₗ-trans τ₂'⊆ₗτ₂'' τ₂''⊆ₗτ₂)
--   where
--   ih : ∃(λ{(τ₁'' , τ₂'') -> τ'' ≈ (τ₁'' ++ τ₂'') × τ₁'' ⊆ₗ[ A ] τ₁ × τ₂'' ⊆ₗ[ A ] τ₂})
--   ih = ∃-≈-⊆ τ τ'' τ₁ τ₂ τ₁∷' τ₂∷' τ≈τ₁++τ₂ τ''⊆ₗτ
--
--   τ₁'' = proj₁ (proj₁ ih)
--   τ₂'' = proj₂ (proj₁ ih)
--   τ''≈τ₁''++τ₂'' = proj₁ (proj₂ ih)
--   τ₁''⊆ₗτ₁ = proj₁ (proj₂ (proj₂ ih))
--   τ₂''⊆ₗτ₂ = proj₂ (proj₂ (proj₂ ih))
--
--   ih₂ : ∃(λ{(τ₁' , τ₂') -> τ' ≈ (τ₁' ++ τ₂') × τ₁' ⊆ₗ[ A ] τ₁'' × τ₂' ⊆ₗ[ A ] τ₂''})
--   ih₂ = ∃-≈-⊆ τ'' τ' τ₁'' τ₂'' (⊆ₗ-∷'ₗ-l τ₁''⊆ₗτ₁) (⊆ₗ-∷'ₗ-l τ₂''⊆ₗτ₂) τ''≈τ₁''++τ₂'' τ'⊆ₗτ''
--
--   τ₁' = proj₁ (proj₁ ih₂)
--   τ₂' = proj₂ (proj₁ ih₂)
--   τ'≈τ₁'++τ₂' = proj₁ (proj₂ ih₂)
--   τ₁'⊆ₗτ₁'' = proj₁ (proj₂ (proj₂ ih₂))
--   τ₂'⊆ₗτ₂'' = proj₂ (proj₂ (proj₂ ih₂))



sub : ∀ {A Γ Γ'} {m : Λ A} {τ τ'} -> Γ ⊩ m ∶ τ -> τ' ⊆[ A ] τ -> Γ ⊆Γ Γ' -> Γ' ⊩ m ∶ τ'
subₗ : ∀ {A Γ Γ'} {m : Λ A} {τ τ'} -> Γ ⊩ₗ m ∶ τ -> τ' ⊆ₗ[ A ] τ -> Γ ⊆Γ Γ' -> Γ' ⊩ₗ m ∶ τ'

sub (var wf-Γ τᵢ∈Γ τ⊆τᵢ) τ'⊆τ Γ⊆Γ' =
  var (⊆Γ-wfΓ' Γ⊆Γ') τᵢ'∈ (⊆ₗ-trans (⊆ₗ-trans (⊆->⊆ₗ τ'⊆τ) τ⊆τᵢ) τᵢ⊆τᵢ')
  where
  τᵢ'∈ = proj₁ (proj₂ (∈-⊆Γ-trans τᵢ∈Γ Γ⊆Γ'))
  τᵢ⊆τᵢ' = proj₂ (proj₂ (∈-⊆Γ-trans τᵢ∈Γ Γ⊆Γ'))

sub (app Γ⊩s∶τ₁~>τ₂ Γ⊩ₗt∶τ₁ τ⊆τ₂ τ∷A) τ'⊆τ Γ⊆Γ' = app
  (subΓ Γ⊩s∶τ₁~>τ₂ Γ⊆Γ')
  (subₗΓ Γ⊩ₗt∶τ₁ Γ⊆Γ')
  (⊆ₗ-trans (⊆->⊆ₗ τ'⊆τ) τ⊆τ₂)
  τ∷A
sub {_} {Γ} {Γ'} (abs {τ = τ} {τ'} L {t} cf τ~>τ'∷A⟶B) (arr {A} {τ₁₁ = τ₁₁} τ⊆τ₁₁ τ₁₂⊆τ' (arr τ₁₁∷A τ₁₂∷B) x₃) Γ⊆Γ' = abs
  (L ++ dom Γ')
  (λ x∉ → subₗ
    (cf (∉-cons-l _ _ x∉))
    τ₁₂⊆τ'
    (cons (τ₁₁ , (here refl) , τ⊆τ₁₁) (⊆Γ-∷ (∉-cons-r L _ x∉) τ₁₁∷A Γ⊆Γ'))
  )
  (arr τ₁₁∷A τ₁₂∷B)
sub (Y wf-Γ τ₁⊆τ~>τ τ₂⊆τ) (arr {τ₁₁ = τ₁'} τ₁⊆τ₁' τ₂'⊆τ₂ (arr ∩τ₁'∷A⟶A τ₂'∷A) x₄) Γ⊆Γ' =
  Y (⊆Γ-wfΓ' Γ⊆Γ') (⊆ₗ-trans τ₁⊆τ~>τ τ₁⊆τ₁') (⊆ₗ-trans τ₂'⊆τ₂ τ₂⊆τ)


-- sub {_} {Γ} {Γ'} {m} (~>∩ {A = A} {B} {τ} {τ₁} {τ₂} {τ₁τ₂} x y τ₁τ₂≈τ₁++τ₂) (arr {τ₁₁ = τ'} {τ₁τ₂'} τ⊆τ' τ₁τ₂'⊆τ₁τ₂ x₃ x₄) Γ⊆Γ' = ~>∩ {A = A} {B} {τ'} {τ₁'} {τ₂'} {τ₁τ₂'}
--   (sub x (arr τ⊆τ' τ₁⊆ₗτ₁' (arr τ'∷' τ₁∷') (arr τ∷' τ₁'∷')) Γ⊆Γ')
--   (sub y (arr τ⊆τ' τ₂⊆ₗτ₂' (arr τ'∷' τ₂∷') (arr τ∷' τ₂'∷')) Γ⊆Γ')
--   τ'≈τ₁'++τ₂'
--   where
--   ih = ∃-≈-⊆ τ₁τ₂ τ₁τ₂' τ₁ τ₂ (proj₂ (arr' (⊩-∷' x))) (proj₂ (arr' (⊩-∷' y))) τ₁τ₂≈τ₁++τ₂ τ₁τ₂'⊆τ₁τ₂
--
--   τ₁' = proj₁ (proj₁ ih)
--   τ₂' = proj₂ (proj₁ ih)
--   τ'≈τ₁'++τ₂' = proj₁ (proj₂ ih)
--   τ₁⊆ₗτ₁' = proj₁ (proj₂ (proj₂ ih))
--   τ₂⊆ₗτ₂' = proj₂ (proj₂ (proj₂ ih))
--
--   τ∷' = ⊆ₗ-∷'ₗ-l τ⊆τ'
--   τ'∷' = ⊆ₗ-∷'ₗ-r τ⊆τ'
--   τ₁∷' = ⊆ₗ-∷'ₗ-l τ₁⊆ₗτ₁'
--   τ₁'∷' = ⊆ₗ-∷'ₗ-r τ₁⊆ₗτ₁'
--   τ₂∷' = ⊆ₗ-∷'ₗ-l τ₂⊆ₗτ₂'
--   τ₂'∷' = ⊆ₗ-∷'ₗ-r τ₂⊆ₗτ₂'

sub {_} {Γ} {Γ'} {m} (~>∩ {A = A} {B} {τ} {τ₁} {τ₂} {τ₁τ₂} x y τ₁τ₂⊆τ₁++τ₂) (arr {τ₁₁ = τ'} {τ₁τ₂'} τ⊆τ' τ₁τ₂'⊆τ₁τ₂ x₃ x₄) Γ⊆Γ' =
  ~>∩ (sub x (arr τ⊆τ' (⊆ₗ-refl τ₁∷') (arr τ'∷' τ₁∷') (arr τ∷' τ₁∷')) Γ⊆Γ') (sub y (arr τ⊆τ' (⊆ₗ-refl τ₂∷') (arr τ'∷' τ₂∷') (arr τ∷' τ₂∷')) Γ⊆Γ') (⊆ₗ-trans τ₁τ₂'⊆τ₁τ₂ τ₁τ₂⊆τ₁++τ₂)
  where
  τ~>τ₁ = ⊩-∷' x
  τ~>τ₂ = ⊩-∷' y

  τ∷' = ⊆ₗ-∷'ₗ-l τ⊆τ'
  τ'∷' = ⊆ₗ-∷'ₗ-r τ⊆τ'
  τ₁∷' = proj₂ (arr' τ~>τ₁)
  τ₂∷' = proj₂ (arr' τ~>τ₂)

-- sub (~>∩ x y τ₁τ₂⊆τ₁++τ₂) (arr τ⊆τ' (nil x₁) x₃ x₄) Γ⊆Γ' = ~>∩
--   (sub x (arr τ⊆τ' (nil {!   !}) {!   !} {!   !}) Γ⊆Γ')
--   (sub y (arr τ⊆τ' (nil {!   !}) {!   !} {!   !}) Γ⊆Γ')
--   {!   !}
-- sub (~>∩ {τ₁ = τ₁} x y τ₁τ₂⊆τ₁++τ₂) (arr τ⊆τ' (cons (τ''' , τ'''∈τ₁τ₂ , τ''⊆τ''') τ₁τ₂'⊆τ₁τ₂) (arr τ₁₁∷'A (cons τ'∷B τ'ᵢ∷B)) x₄) Γ⊆Γ' = {!   !} -- with ∈-++-∨ τ₁ (τ₁τ₂⊆τ₁++τ₂ τ'''∈τ₁τ₂)
-- -- sub (~>∩ x y τ₁τ₂⊆τ₁++τ₂) (arr τ⊆τ' (cons (τ''' , τ'''∈τ₁τ₂ , τ''⊆τ''') τ₁τ₂'⊆τ₁τ₂) (arr τ₁₁∷'A (cons τ'∷B τ'ᵢ∷B)) x₄) Γ⊆Γ' | inj₁ τ'''∈τ₁ = ~>∩
-- --   (sub x (arr τ⊆τ' (cons (τ''' , (τ'''∈τ₁ , τ''⊆τ''')) (nil {!   !})) {!   !} {!   !}) Γ⊆Γ')
-- --   (sub ((~>∩ x y τ₁τ₂⊆τ₁++τ₂)) (arr τ⊆τ' τ₁τ₂'⊆τ₁τ₂ (arr τ₁₁∷'A τ'ᵢ∷B) x₄) Γ⊆Γ')
-- --   ((λ {x₁} x₂ → x₂) , (λ {x₁} x₂ → x₂))
-- -- sub (~>∩ x y₁ τ₁τ₂⊆τ₁++τ₂) (arr τ⊆τ' (cons (τ''' , τ'''∈τ₁τ₂ , τ''⊆τ''') τ₁τ₂'⊆τ₁τ₂) (arr τ₁₁∷'A (cons τ'∷B τ'ᵢ∷B)) x₄) Γ⊆Γ' | inj₂ τ'''∈τ₂ = {!   !}
--
-- sub {_} {Γ} {Γ'} {m} (~>∩ x y τ₁τ₂⊆τ₁++τ₂) (arr τ⊆τ' (~>∩ x₁) x₃ x₄) Γ⊆Γ' = {! τ₁τ₂⊆τ₁++τ₂  !}
-- sub (~>∩ x y τ₁τ₂⊆τ₁++τ₂) (arr τ⊆τ' (⊆ₗ-trans τ₁τ₂'⊆τ₁τ₂ τ₁τ₂'⊆τ₁τ₃) x₃ x₄) Γ⊆Γ' =
--   sub (sub (~>∩ x y τ₁τ₂⊆τ₁++τ₂) (arr {!   !} τ₁τ₂'⊆τ₁τ₃ {!   !} {!   !}) {!   !}) {!   !} {!   !}


-- sub {_} {Γ} {Γ'} {m} (~>∩ {A = A} {B} {τ} {τ₁} {τ₂} {τ₁τ₂} x y (τ₁τ₂⊆τ₁++τ₂ , τ₁++τ₂⊆τ₁τ₂)) (arr {τ₁₁ = τ'} {τ₁τ₂'} τ⊆τ' τ₁τ₂'⊆τ₁τ₂ x₃ x₄) Γ⊆Γ' =
  -- ~>∩ {τ₁ = τ₁'} {τ₂'} (sub x (arr τ⊆τ' τ₁'⊆ₗτ₁ (arr τ'∷ τ₁'∷) (arr τ∷ τ₁∷)) Γ⊆Γ') (sub y (arr τ⊆τ' τ₂'⊆ₗτ₂ (arr τ'∷ τ₂'∷) (arr τ∷ τ₂∷)) Γ⊆Γ') τ₁τ₂'≈τ₁'++τ₂'
  --
  -- where
  -- τ~>τ₁ = ⊩-∷' x
  -- τ~>τ₂ = ⊩-∷' y
  --
  -- τ₁++τ₂∷' : (τ₁ ++ τ₂) ∷'ₗ B
  -- τ₁++τ₂∷' = ++-∷'ₗ (proj₂ (arr' τ~>τ₁)) (proj₂ (arr' τ~>τ₂))
  --
  -- τ₁τ₂⊆ₗτ₁++τ₂ : τ₁τ₂ ⊆ₗ[ B ] (τ₁ ++ τ₂)
  -- τ₁τ₂⊆ₗτ₁++τ₂ = ⊆ₗ-⊆ τ₁τ₂⊆τ₁++τ₂ τ₁++τ₂∷'
  --
  -- body : ∃(λ {(τ₁' , τ₂') -> τ₁τ₂' ≈ (τ₁' ++ τ₂') × (τ₁' ⊆ₗ[ B ] τ₁) × (τ₂' ⊆ₗ[ B ] τ₂) })
  -- body = ∃⊆ₗ-++ (⊆ₗ-trans τ₁τ₂'⊆τ₁τ₂ τ₁τ₂⊆ₗτ₁++τ₂)
  --
  -- τ₁' = proj₁ (proj₁ body)
  -- τ₂' = proj₂ (proj₁ body)
  -- τ₁τ₂'≈τ₁'++τ₂' = proj₁ (proj₂ body)
  -- τ₁'⊆ₗτ₁ = proj₁ (proj₂ (proj₂ body))
  -- τ₂'⊆ₗτ₂ = proj₂ (proj₂ (proj₂ body))
  --
  -- τ₁∷ = ∷'ₗ-++-l {τᵢ = τ₁} (⊆ₗ-∷'ₗ-r τ₁τ₂⊆ₗτ₁++τ₂)
  -- τ₂∷ = ∷'ₗ-++-r {τᵢ = τ₁} (⊆ₗ-∷'ₗ-r τ₁τ₂⊆ₗτ₁++τ₂)
  -- τ₁'∷ = (⊆ₗ-∷'ₗ-l τ₁'⊆ₗτ₁)
  -- τ₂'∷ = (⊆ₗ-∷'ₗ-l τ₂'⊆ₗτ₂)
  -- τ∷ = ⊆ₗ-∷'ₗ-l τ⊆τ'
  -- τ'∷ = ⊆ₗ-∷'ₗ-r τ⊆τ'


subₗ Γ⊩ₗm∶τ (nil x) Γ⊆Γ' = nil (⊆Γ-wfΓ' Γ⊆Γ')
subₗ Γ⊩ₗm∶τᵢ (cons (τ , τ∈τᵢ , τ'⊆τ) τ'ᵢ⊆τᵢ) Γ⊆Γ' with ⊩ₗ-∈-⊩ Γ⊩ₗm∶τᵢ τ∈τᵢ
... | Γ⊩m∶τ = cons (sub Γ⊩m∶τ τ'⊆τ Γ⊆Γ') (subₗ Γ⊩ₗm∶τᵢ τ'ᵢ⊆τᵢ Γ⊆Γ')
subₗ (cons x (cons x₁ Γ⊩ₗm∶τ)) (~>∩ (cons (arr x₂ x₃) x₄)) Γ⊆Γ' =
  cons (~>∩ (subΓ x Γ⊆Γ') (subΓ x₁ Γ⊆Γ') (⊆ₗ-refl τ₁++τ₂∷')) (subₗΓ Γ⊩ₗm∶τ Γ⊆Γ')
  where
  τ~>τ₁ = ⊩-∷' x
  τ~>τ₂ = ⊩-∷' x₁
  τ₁++τ₂∷' = ++-∷'ₗ (proj₂ (arr' τ~>τ₁)) (proj₂ (arr' τ~>τ₂))
subₗ Γ⊩ₗm∶τ (⊆ₗ-trans τ'⊆τ τ'⊆τ₁) Γ⊆Γ' = subₗ (subₗ Γ⊩ₗm∶τ τ'⊆τ₁ Γ⊆Γ') τ'⊆τ (⊆Γ-⊆ (⊆Γ-wfΓ' Γ⊆Γ') (λ {x} z → z))





------------------------------------------------------------------------------


Y-inv : ∀ {A Γ τ₁ τ₂} -> Γ ⊩ Y A ∶ (τ₁ ~> τ₂) -> ∃(λ τ -> ((∩' (τ ~> τ)) ⊆ₗ[ A ⟶ A ] τ₁) × τ₂ ⊆ₗ[ A ] τ)
Y-inv (Y {τ = τ} wf-Γ x x₁) = τ , x , x₁
Y-inv {A} {Γ} {τ₁} {τ₂τ₃} (~>∩ {τ₁ = τ₂} {τ₃} Γ⊩Y∶τ₁~>τ₂ Γ⊩Y∶τ₁~>τ₃ τ₂τ₃⊆ₗτ₂++τ₃) =
  (τₗ ++ τᵣ) ,
  (⊆ₗ-trans (⊆ₗ-trans body (mon τₗ~>τₗ⊆ₗτ₁ τᵣ~>τᵣ⊆ₗτ₁)) (⊆ₗ-⊆ (⊆-++-ctrct {X = τ₁}) τ₁∷) ,
  ⊆ₗ-trans τ₂τ₃⊆ₗτ₂++τ₃ (mon τ₂⊆ₗτₗ τ₂⊆ₗτᵣ))
  where
  ihₗ : ∃(λ τ -> ((∩' (τ ~> τ)) ⊆ₗ[ A ⟶ A ] τ₁) × τ₂ ⊆ₗ[ A ] τ)
  ihₗ = Y-inv Γ⊩Y∶τ₁~>τ₂

  ihᵣ : ∃(λ τ -> ((∩' (τ ~> τ)) ⊆ₗ[ A ⟶ A ] τ₁) × τ₃ ⊆ₗ[ A ] τ)
  ihᵣ = Y-inv Γ⊩Y∶τ₁~>τ₃

  τₗ = proj₁ ihₗ
  τₗ~>τₗ⊆ₗτ₁ = proj₁ (proj₂ ihₗ)
  τ₂⊆ₗτₗ = proj₂ (proj₂ ihₗ)

  τᵣ = proj₁ ihᵣ
  τᵣ~>τᵣ⊆ₗτ₁ = proj₁ (proj₂ ihᵣ)
  τ₂⊆ₗτᵣ = proj₂ (proj₂ ihᵣ)

  τ₁∷ = ⊆ₗ-∷'ₗ-r τₗ~>τₗ⊆ₗτ₁
  τ₂∷ = ⊆ₗ-∷'ₗ-l τ₂⊆ₗτₗ
  τₗ∷ = ⊆ₗ-∷'ₗ-r τ₂⊆ₗτₗ
  τᵣ∷ = ⊆ₗ-∷'ₗ-r τ₂⊆ₗτᵣ

  body : ∩' ((τₗ ++ τᵣ) ~> (τₗ ++ τᵣ)) ⊆ₗ[ A ⟶ A ] ((τₗ ~> τₗ) ∩ (τᵣ ~> τᵣ))
  body = ⊆ₗ-trans {τⱼ = ((τₗ ++ τᵣ) ~> τₗ) ∩ ((τₗ ++ τᵣ) ~> τᵣ)}
    (~>∩ (cons (arr (∷'ₗ-++ τₗ∷ τᵣ∷) (∷'ₗ-++ τₗ∷ τᵣ∷)) nil))
    (cons (_ , ((here refl) , (arr (⊆ₗ-⊆ (λ x₁ → ∈-cons-l _ x₁) (∷'ₗ-++ τₗ∷ τᵣ∷)) (⊆ₗ-refl τₗ∷) (arr (∷'ₗ-++ τₗ∷ τᵣ∷) τₗ∷) (arr τₗ∷ τₗ∷))))
    (cons (_ , ((there (here refl)) , (arr (⊆ₗ-⊆ (λ x₁ → ∈-cons-r τₗ x₁) (∷'ₗ-++ τₗ∷ τᵣ∷)) (⊆ₗ-refl τᵣ∷) (arr (∷'ₗ-++ τₗ∷ τᵣ∷) τᵣ∷) (arr τᵣ∷ τᵣ∷))))
    (nil (cons (arr τₗ∷ τₗ∷) (cons (arr τᵣ∷ τᵣ∷) nil)))))


Γ⊩Ym-max : ∀ {A Γ} {m : Λ (A ⟶ A)} {τ} -> Γ ⊩ app (Y A) m ∶ τ -> ∃(λ τ' -> Γ ⊩ₗ m ∶ ∩' (τ' ~> τ') × (∩' τ) ⊆ₗ[ A ] τ')
Γ⊩Ym-max {A} {Γ} {m} {τ} (app Γ⊩Y∶τ₁~>τ₂ Γ⊩ₗm∶τ₁ τ⊆ₗτ₂ τ₁∷'A⟶A) = τ' , (subₗ Γ⊩ₗm∶τ₁ τ'~>τ'⊆ₗτ₁ (⊆Γ-⊆ (⊩ₗ-wf-Γ Γ⊩ₗm∶τ₁) (λ {x} z → z)) , ⊆ₗ-trans τ⊆ₗτ₂ τ₂⊆ₗτ)
  where
  body = Y-inv Γ⊩Y∶τ₁~>τ₂
  τ' = proj₁ body
  τ'~>τ'⊆ₗτ₁ = proj₁ (proj₂ body)
  τ₂⊆ₗτ = proj₂ (proj₂ body)

Γ⊩Ym-max {A ⟶ B} {Γ} {m} (~>∩ {τ = τ} {τ₁} {τ₂} {τ₁τ₂} Γ⊩Ym∶τ~>τ₁ Γ⊩Ym∶τ~>τ₂ z) =
  (τ₁' ++ τ₂') ,
  (subₗ (cons (⊩ₗ-∈-⊩ Γ⊩ₗm∶τ₁'~>τ₁' (here refl)) Γ⊩ₗm∶τ₂'~>τ₂') {!   !} (⊆Γ-⊆ ? (λ {x} z → z)) ,
  ⊆ₗ-trans (⊆ₗ-trans (cons ((τ ~> (τ₁ ++ τ₂)) , ((here refl) , (arr (⊆ₗ-refl {!   !}) z {!   !} {!   !}))) (nil {!   !})) (~>∩ {!   !})) aa)

  where
  ihₗ : ∃(λ τ₁' -> Γ ⊩ₗ m ∶ ∩' (τ₁' ~> τ₁') × (∩' (τ ~> τ₁)) ⊆ₗ[ A ⟶ B ] τ₁')
  ihₗ = Γ⊩Ym-max Γ⊩Ym∶τ~>τ₁

  τ₁' = proj₁ ihₗ
  Γ⊩ₗm∶τ₁'~>τ₁' = proj₁ (proj₂ ihₗ)
  τ~>τ₁⊆ₗτ₁' = proj₂ (proj₂ ihₗ)

  ihᵣ : ∃(λ τ₂' -> Γ ⊩ₗ m ∶ ∩' (τ₂' ~> τ₂') × (∩' (τ ~> τ₂)) ⊆ₗ[ A ⟶ B ] τ₂')
  ihᵣ = Γ⊩Ym-max Γ⊩Ym∶τ~>τ₂

  τ₂' = proj₁ ihᵣ
  Γ⊩ₗm∶τ₂'~>τ₂' = proj₁ (proj₂ ihᵣ)
  τ~>τ₂⊆ₗτ₂' = proj₂ (proj₂ ihᵣ)

  aa = mon τ~>τ₁⊆ₗτ₁' τ~>τ₂⊆ₗτ₂'


¬ω⊆-impl¬ω : ∀ {A τ τ'} -> ¬(τ ≡ ω) -> τ ⊆ₗ[ A ] τ' -> ¬(τ' ≡ ω)
¬ω⊆-impl¬ω τ≠ω (nil x) τ'≡ω = τ≠ω refl
¬ω⊆-impl¬ω τ≠ω (cons (_ , () , _) τ⊆ₗτ') refl
¬ω⊆-impl¬ω τ≠ω (~>∩ x) ()
¬ω⊆-impl¬ω τ≠ω (⊆ₗ-trans τ⊆ₗτ' τ⊆ₗτ'') τ'≡ω = ¬ω⊆-impl¬ω (¬ω⊆-impl¬ω τ≠ω τ⊆ₗτ') τ⊆ₗτ'' τ'≡ω

-- ~>∩ₗ : ∀ {A B Γ} {m : Λ (A ⟶ B)} {τ τ' τ''} -> Γ ⊩ₗ m ∶ ((τ ~> τ') ∷ ∩' (τ ~> τ'')) -> Γ ⊩ₗ m ∶ ∩' (τ ~> (τ' ++ τ''))
-- ~>∩ₗ (cons Γ⊩ₗm∶τ~>τ' (cons Γ⊩ₗm∶τ~>τ'' (nil wf-Γ))) = cons (~>∩ Γ⊩ₗm∶τ~>τ' Γ⊩ₗm∶τ~>τ'' (⊆ₗ-refl {!   !})) (nil wf-Γ)

Γ⊩ₗYm-max : ∀ {A Γ} {m : Λ (A ⟶ A)} {τ} -> ¬(τ ≡ ω) -> Γ ⊩ₗ app (Y A) m ∶ τ -> ∃(λ τ' -> Γ ⊩ₗ m ∶ ∩' (τ' ~> τ') × τ ⊆ₗ[ A ] τ')
Γ⊩ₗYm-max τ≠ω (nil wf-Γ) = ⊥-elim (τ≠ω refl)
Γ⊩ₗYm-max {A} {Γ} {m} {τ ∷ τᵢ} τ≠ω (cons x Γ⊩ₗYm∶τ) with τᵢ ≟TIₗ ω
Γ⊩ₗYm-max {A} {Γ} {m} {τ ∷ .[]} τ≠ω (cons x Γ⊩ₗYm∶τ) | yes refl = Γ⊩Ym-max x
Γ⊩ₗYm-max {A} {Γ} {m} {τ ∷ τᵢ} τ≠ω (cons x Γ⊩ₗYm∶τ) | no τᵢ≠ω =
  τ' ++ τᵢ' ,
  subₗ Γ⊩ₗm∶ττᵢ'~>τ'ττᵢ'~>τᵢ' (~>∩ (cons (arr (∷'ₗ-++ τ'∷'A τᵢ'∷'A) (∷'ₗ-++ τ'∷'A τᵢ'∷'A)) nil)) (⊆Γ-⊆ (⊩ₗ-wf-Γ Γ⊩ₗYm∶τ) (λ {x} z → z)) ,
  mon τ⊆τ' τᵢ⊆τᵢ'
  where
  ih : ∃(λ τᵢ' -> Γ ⊩ₗ m ∶ ∩' (τᵢ' ~> τᵢ') × τᵢ ⊆ₗ[ A ] τᵢ')
  ih = Γ⊩ₗYm-max τᵢ≠ω Γ⊩ₗYm∶τ

  τᵢ' = proj₁ ih
  Γ⊩ₗm∶τᵢ'~>τᵢ' : Γ ⊩ₗ m ∶ ∩' (τᵢ' ~> τᵢ')
  Γ⊩ₗm∶τᵢ'~>τᵢ' = proj₁ (proj₂ ih)

  τᵢ⊆τᵢ' = proj₂ (proj₂ ih)

  body : ∃(λ τ' -> Γ ⊩ₗ m ∶ ∩' (τ' ~> τ') × ∩' τ ⊆ₗ[ A ] τ')
  body = Γ⊩Ym-max x

  τ' = proj₁ body
  Γ⊩ₗm∶τ'~>τ' : Γ ⊩ₗ m ∶ ∩' (τ' ~> τ')
  Γ⊩ₗm∶τ'~>τ' = proj₁ (proj₂ body)

  τ⊆τ' = proj₂ (proj₂ body)

  τ'∷'A = ⊆ₗ-∷'ₗ-r τ⊆τ'
  τᵢ'∷'A = ⊆ₗ-∷'ₗ-r τᵢ⊆τᵢ'

  Γ⊩ₗm∶ττᵢ'~>τ'ττᵢ'~>τᵢ' : Γ ⊩ₗ m ∶ (∩' ((τ' ++ τᵢ') ~> τ') ++ ∩' ((τ' ++ τᵢ') ~> τᵢ'))
  Γ⊩ₗm∶ττᵢ'~>τ'ττᵢ'~>τᵢ' = ⊩++ {τᵢ = ∩' ((τ' ++ τᵢ') ~> τ')} {∩' ((τ' ++ τᵢ') ~> τᵢ')}
    (subₗ Γ⊩ₗm∶τ'~>τ'
      (cons
        ( (τ' ~> τ') ,
          ((here refl) ,
          (arr (⊆ₗ-⊆ (λ x₂ → ∈-cons-l _ x₂) (∷'ₗ-++ τ'∷'A τᵢ'∷'A)) (⊆ₗ-refl τ'∷'A) (arr (∷'ₗ-++ τ'∷'A τᵢ'∷'A) τ'∷'A) (arr τ'∷'A τ'∷'A))))
        (nil (cons (arr τ'∷'A τ'∷'A) nil)))
      (⊆Γ-⊆ (⊩ₗ-wf-Γ Γ⊩ₗYm∶τ) (λ {x} z → z)))
    (subₗ Γ⊩ₗm∶τᵢ'~>τᵢ'
      (cons
        ( (τᵢ' ~> τᵢ') ,
          (here refl ,
          arr (⊆ₗ-⊆ (λ x₂ → ∈-cons-r τ' x₂) (∷'ₗ-++ τ'∷'A τᵢ'∷'A)) (⊆ₗ-refl τᵢ'∷'A) (arr (∷'ₗ-++ τ'∷'A τᵢ'∷'A) τᵢ'∷'A) (arr τᵢ'∷'A τᵢ'∷'A)))
        (nil (cons (arr τᵢ'∷'A τᵢ'∷'A) nil)))
      (⊆Γ-⊆ (⊩ₗ-wf-Γ Γ⊩ₗYm∶τ) (λ {x} z → z)))



Γ⊩mYm∶τ->Γ⊩Ym∶τ : ∀ {A Γ m τ} -> Γ ⊩ app m (app (Y A) m) ∶ τ -> Γ ⊩ app (Y A) m ∶ τ
Γ⊩mYm∶τ->Γ⊩Ym∶τ {A} {Γ} {τ = τ} (app {s = m} {τ₁ = []} {τᵢ} Γ⊩m∶τᵢ'~>τᵢ (nil wf-Γ) τ⊆τᵢ τᵢ'∷A) = app
  (Y {τ = ∩' τ} {(ω ~> ∩' τ) ∷ []} {∩' τ}
    wf-Γ
    (cons (([] ~> ∩' τ) , ((here refl) , (arr (nil τ∷A) (⊆ₗ-refl τ∷A) (arr τ∷A τ∷A) (arr τᵢ'∷A τ∷A)))) (nil (cons (arr τᵢ'∷A τ∷A) nil)))
    (⊆ₗ-refl τ∷A))
  (cons (sub Γ⊩m∶τᵢ'~>τᵢ (arr (nil τᵢ'∷A) τ⊆τᵢ (arr τᵢ'∷A τ∷A) (arr τᵢ'∷A (⊆ₗ-∷'ₗ-r τ⊆τᵢ))) (⊆Γ-⊆ wf-Γ (λ {x} z → z))) (nil wf-Γ))
  (⊆ₗ-refl τ∷A)
  (cons (arr τᵢ'∷A τ∷A) nil)

  where
  τ∷A = ⊆ₗ-∷'ₗ-l τ⊆τᵢ
Γ⊩mYm∶τ->Γ⊩Ym∶τ {A} {Γ} {τ = τ} (app {s = m} {τ₁ = τ' ∷ τᵢ'} {τᵢ} Γ⊩m∶τᵢ'~>τᵢ (cons x₁ Γ⊩ₗYm∶τ'ᵢ₁) τ⊆τᵢ τᵢ'∷A) = app
  (Y {τ = [ τ ] ++ τ''} {∩' (τ'' ~> ([ τ ] ++ τ''))} {∩' τ}
    (⊩ₗ-wf-Γ Γ⊩ₗYm∶τ'ᵢ₁)
    (cons
      (
        (τ'' ~> ([ τ ] ++ τ'')) ,
        here refl ,
        arr
          (⊆ₗ-⊆ (λ x₂ → ∈-cons-r [ τ ] x₂) (cons τ∷'A τ''∷'A))
          (⊆ₗ-refl (cons τ∷'A τ''∷'A))
          (arr (cons τ∷'A τ''∷'A) (cons τ∷'A τ''∷'A))
          (arr τ''∷'A (cons τ∷'A τ''∷'A)))
      (nil (cons (arr τ''∷'A (cons τ∷'A τ''∷'A)) nil)))
    (cons (τ , (here refl , ⊆-refl τ∷'A)) (nil (cons τ∷'A τ''∷'A))))
  Γ⊩ₗm∶τ''~>τ++τ''
  (⊆ₗ-refl (cons τ∷'A nil))
  (cons (arr τ''∷'A (cons τ∷'A τ''∷'A)) nil)

  where
  τᵢ'' = τ' ∷ τᵢ'
  body₁ : ∃(λ τ'' -> Γ ⊩ₗ m ∶ ∩' (τ'' ~> τ'') × τᵢ'' ⊆ₗ[ A ] τ'')
  body₁ = Γ⊩ₗYm-max (λ ()) (cons x₁ Γ⊩ₗYm∶τ'ᵢ₁)

  τ'' = proj₁ body₁

  Γ⊩ₗm∶τ''~>τ'' : Γ ⊩ₗ m ∶ ∩' (τ'' ~> τ'')
  Γ⊩ₗm∶τ''~>τ'' = proj₁ (proj₂ body₁)

  τᵢ''⊆τ'' = proj₂ (proj₂ body₁)
  τ''∷'A = ⊆ₗ-∷'ₗ-r τᵢ''⊆τ''
  τᵢ''∷'A = ⊆ₗ-∷'ₗ-l τᵢ''⊆τ''

  τ∷'A : τ ∷' A
  τ∷'A = ∷'ₗ-∈ (here refl) (⊆ₗ-∷'ₗ-l τ⊆τᵢ)

  Γ⊩m∶τ''~>τ : Γ ⊩ m ∶ (τ'' ~> ∩' τ)
  Γ⊩m∶τ''~>τ = sub Γ⊩m∶τᵢ'~>τᵢ (arr τᵢ''⊆τ'' τ⊆τᵢ (arr τ''∷'A (⊆ₗ-∷'ₗ-l τ⊆τᵢ)) (arr τᵢ''∷'A (⊆ₗ-∷'ₗ-r τ⊆τᵢ))) (⊆Γ-⊆ (⊩ₗ-wf-Γ Γ⊩ₗYm∶τ'ᵢ₁) (λ {x} z → z))

  Γ⊩ₗm∶τ''~>τ++τ'' : Γ ⊩ₗ m ∶ ∩' (τ'' ~> ([ τ ] ++ τ''))
  Γ⊩ₗm∶τ''~>τ++τ'' = subₗ (cons Γ⊩m∶τ''~>τ Γ⊩ₗm∶τ''~>τ'') (~>∩ (cons (arr τ''∷'A (cons τ∷'A τ''∷'A)) nil)) (⊆Γ-⊆ (⊩ₗ-wf-Γ Γ⊩ₗYm∶τ'ᵢ₁) (λ {x} z → z))

Γ⊩mYm∶τ->Γ⊩Ym∶τ (~>∩ Γ⊩mYm∶τ Γ⊩mYm∶τ₁ z) = ~>∩ (Γ⊩mYm∶τ->Γ⊩Ym∶τ Γ⊩mYm∶τ) (Γ⊩mYm∶τ->Γ⊩Ym∶τ Γ⊩mYm∶τ₁) z


⊩->β : ∀ {A Γ} {m m' : Λ A} {τ} -> Γ ⊩ m' ∶ τ -> m ->Λβ m' -> Γ ⊩ m ∶ τ
⊩->βₗ : ∀ {A Γ} {m m' : Λ A} {τ} -> Γ ⊩ₗ m' ∶ τ -> m ->Λβ m' -> Γ ⊩ₗ m ∶ τ

⊩->β Γ⊩m'∶τ (redL x m->βm') = {!   !}
⊩->β Γ⊩m'∶τ (redR x m->βm') = {!   !}
⊩->β Γ⊩m'∶τ (abs L x) = {!   !}
⊩->β Γ⊩m'∶τ (beta x x₁) = {!   !}
⊩->β Γ⊩mYm∶τ (Y _) = Γ⊩mYm∶τ->Γ⊩Ym∶τ Γ⊩mYm∶τ

⊩->βₗ (nil wf-Γ) m->βm' = nil wf-Γ
⊩->βₗ (cons x Γ⊩ₗm'∶τ) m->βm' = cons (⊩->β x m->βm') (⊩->βₗ Γ⊩ₗm'∶τ m->βm')
-- ⊩->βₗ (subₗ Γ⊩ₗm'∶τ x) m->βm' = subₗ (⊩->βₗ Γ⊩ₗm'∶τ m->βm') x
